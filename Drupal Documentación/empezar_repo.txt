#!/bin/bash
#  Comando para automatizar el despligue de un proyecto para el desarrollo
#  Uso:
#       $ ./init.sh nombre_proyecto usuario_db pwd_db

# Comprueba si se han inroducido argumentos e imprime ayuda si no.
if [ "$#" == 0 ] || [ ${1} == "help" ];
then
    echo -e "
\e[1;33m+-----------------------------------+\e[0m
\e[1;33m|\e[0m\e[0;32mREPOSITORY DRUPAL PROYECT AUTOMATOR\e[0m\e[1;33m|\e[0m
\e[1;33m+-----------------------------------+\e[0m

Modo de empleo:

1º.- Busca tu proyecto en el listado de \e[1;36mbitbucket\e[0m , ahi encontrarás el nombre del proyecto. El nombre del proyecto lo podras encontrar en la url ej: https://bitbucket.org/prodigia/\e[1;31mnombre_proyecto\e[0m

2º.- Ejecutalo así:
    \e[1;32muser@localhost \e[0m\e[0;32m ~/carpeta_proyectos_drupal/\e[0m $ \e[1;34m./init.sh\e[0m \e[1;31mnombre_proyecto\e[0m \e[1;31musuario_db\e[0m \e[1;31mpasswd_db\e[0m

3º.- Despues puedes ejecutar el servidor con drupal console:
    \e[1;32muser@localhost \e[0m\e[0;32m~/carpeta_proyectos_drupal/proyecto_drupal/\e[0m $ \e[1;34m./vendor/drupal/console/bin/drupal\e[0m\e[1;31m server \e[0m


  \e[0;35mIMPORTANTE: este script sobreescribirá cualquier base de datos que tengas con \e[0m\e[1;35mnombre_proyecto\e[0m

  \e[0m";
  exit;
else
    echo "bien echo!";
fi

# Datos a configurar
NAMESPACE=${1}
ESC_NAMESPACE=${1//\-/_}
DBUSER=${2}
DBPWD=${3}
DBNAME=${1//\-/_}
SITENAME=${1//\-/_}
SITEMAIL="admin@example.com" #CAMBIAR

# Clonamos el repositorio
git clone git@bitbucket.org:prodigia/$NAMESPACE.git $ESC_NAMESPACE

cd $ESC_NAMESPACE

# Instalamos dependencias con composer
composer install
# En el server cambiar por `$ php -d allow_url_fopen=on /opt/cpanel/composer/bin/composer install`

#Creamos alias a drush
ROOT=`pwd`
drush="$ROOT/vendor/drush/drush/drush"
cd web

# Install site
echo -e "\e[1;36m
Instalando drupal...
\e[0m"
$drush site-install --db-url="mysql://$DBUSER:$DBPWD@localhost/$DBNAME" --account-name=admin --account-pass=admin standard install_configure_form.update_status_module='array(FALSE,FALSE)' -y

# Instalar dependencias Nodejs del tema, si es existe
if [ -f "$ROOT/web/modules/${NAMESPACE}_theme/package.json" ]; then
    cd themes/custom/project_theme/
    npm install
    cd ../../..
fi

# Añadidmos el directorio de configuración en settings.php
# para poder ejecutar "drush config-import staging" y que
# apunte al directorio de configuracion
chmod +w sites/default
chmod +w sites/default/settings.php
cp sites/example.settings.local.php sites/default/settings.local.php
printf "\$config_directories['staging'] = '../config_staging';" >> sites/default/settings.php
# Añanimos línea  Habilitamos configuración
printf "\nif (file_exists(\$app_root . '/' . \$site_path . '/settings.local.php')) {\n
  include \$app_root . '/' . \$site_path . '/settings.local.php';\n}\n" >> sites/default/settings.php
chmod -w sites/default/settings.php
chmod -w sites/default

# Parche para poder importar la configuración
# Ver: https://www.drupal.org/node/2583113#comment-11333793
$drush ev '\Drupal::entityManager()->getStorage("shortcut_set")->load("default")->delete();'
$drush pmu shortcut -y

if [ -d "$ROOT/config_staging/" ]; then
    echo -e "\e[1;36m
        Importando configuración...
    \e[0m"
    # Recogemos el uuid de la configuration e importamos
    uuid=`cat ../config_staging/system.site.yml |awk '/uuid: /{print $NF}'`
    $drush config-set "system.site" uuid $uuid -y

    # Importamos resto de la configuración
    $drush config-import staging -y
fi
